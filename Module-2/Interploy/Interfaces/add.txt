------------- Adding Interface Members --------------------

An interface defines the signature of members but does not include any implementation details.
Interfaces can include methods, properties, events, and indexers:

1. To define a method, you specify the name of the method, the return type,
and any parameters:  int GetServingTemperature(bool includesMilk);

2. To define a property, you specify the name of the property, the type of the property,
and the property accessors:   bool IsFairTrade { get; set; }

3. To define an event, you use the event keyword, followed by the event handler delegate,
followed by the name of the event:  event EventHandler OnSoldOut;

4. To define an indexer, you specify the return type and the accessors:
string this[int index] { get; set; }

Interface members do not include access modifiers. The purpose of the interface is to define the members
that an implementing class should expose to consumers, so that all interface members are public.

Interfaces cannot include members that relate to the internal functionality of a class, such as fields,
constants, operators, and constructors.

The following example shows an interface that defines one read-only property and two methods:

// Defining an Interface
public interface ILoyaltyCardHolder
{
   int TotalPoints { get; }
   int AddPoints(decimal transactionValue);
   void ResetPoints();
}

Notice that the methods in the interface do not include method bodies. Similarly, the properties in
the interface indicate which accessors to include but do not provide any implementation details.

The interface simply states that any implementing class must include and provide an implementation for the three members.
The creator of the implementing class can choose how the methods are implemented.

an implementation of the AddPoints method could:

- Calculate the number of points to add by multiplying the transaction value by a fixed amount.
- Get the number of points to add by calling a service.
- Calculate the number of points to add by using additional factors, such as the location of the loyalty cardholder.

The following example shows a class that implements the ILoyaltyCardHolder interface:

// Implementing an Interface
public class Customer : ILoyaltyCardHolder
{
   private int totalPoints;
   public int TotalPoints
   {
      get { return totalPoints; }
   }
   public int AddPoints(decimal transactionValue)
   {
      int points = Decimal.ToInt32(transactionValue);
      totalPoints += points;
      return totalPoints;
   }
   public void ResetPoints()
   {
      totalPoints = 0;
   }
   // Other members of the Customer class.
}